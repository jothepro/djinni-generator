package djinni

import org.scalatest.{BeforeAndAfter, FunSpec, GivenWhenThen}
import org.scalatest.prop.TableDrivenPropertyChecks._

import scala.::

/**
  * Integration test that ensures the correct (expected) output is generated by djinni for all supported types.
  */
class GeneratorIntegrationTest extends IntegrationTest with GivenWhenThen {
  describe("djinni file generation") {
    val djinniTypes = Table(
      ("idlFile",
        "cppFilenames",
        "javaFilenames",
        "jniFilenames",
        "objcFilenames",
        "objcppFilenames"),
      ("my_enum",
        List("my_enum.hpp"),
        List("MyEnum.java"),
        List("my_enum.hpp"),
        List("ITMyEnum.h"),
        List("ITMyEnum+Private.h")),
      ("my_flags",
        List("my_flags.hpp"),
        List("MyFlags.java"),
        List("my_flags.hpp"),
        List("ITMyFlags.h"),
        List("ITMyFlags+Private.h")),
      ("my_record",
        List("my_record.hpp", "my_record.cpp"),
        List("MyRecord.java"),
        List("my_record.hpp", "my_record.cpp"),
        List("ITMyRecord.h", "ITMyRecord.mm"),
        List("ITMyRecord+Private.h", "ITMyRecord+Private.mm")),
      ("my_cpp_interface",
        List("my_cpp_interface.hpp", "my_cpp_interface.cpp"),
        List("MyCppInterface.java"),
        List("my_cpp_interface.hpp", "my_cpp_interface.cpp"),
        List("ITMyCppInterface.h", "ITMyCppInterface.mm"),
        List("ITMyCppInterface+Private.h", "ITMyCppInterface+Private.mm")),
      ("my_client_interface",
        List("my_client_interface.hpp"),
        List("MyClientInterface.java"),
        List("my_client_interface.hpp", "my_client_interface.cpp"),
        List("ITMyClientInterface.h"),
        List("ITMyClientInterface+Private.h", "ITMyClientInterface+Private.mm"))
      )
    forAll (djinniTypes) { (idlFile: String, cppFilenames: List[String], javaFilenames: List[String], jniFilenames: List[String], objcFilenames: List[String], objcppFilenames: List[String]) =>
      it(s"should generate valid language bridges for `$idlFile`-types") {
        Given(s"`$idlFile.djinni`")
        When(s"generating language-bridges from `$idlFile.djinni`")
        djinniGenerate(idlFile)

        Then(s"the expected files should be created for cpp: ${cppFilenames.mkString(", ")}")
        assertFileContentEquals(idlFile, CPP, cppFilenames)

        Then(s"the expected files should be created for java: ${javaFilenames.mkString(", ")}")
        assertFileContentEquals(idlFile, JAVA, javaFilenames)

        Then(s"the expected files should be created for jni: ${jniFilenames.mkString(", ")}")
        assertFileContentEquals(idlFile, JNI, jniFilenames)

        Then(s"the expected files should be created for objc: ${objcFilenames.mkString(", ")}")
        assertFileContentEquals(idlFile, OBJC, objcFilenames)

        Then(s"the expected files should be created for objcpp: ${objcppFilenames.mkString(", ")}")
        assertFileContentEquals(idlFile, OBJCPP, objcppFilenames)
      }
    }
  }
}
